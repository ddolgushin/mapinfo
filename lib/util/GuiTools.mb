Include "mapbasic.def"
Include "GUITools.def"
Include "Logger.def"
Include "File.def"
Include "../util/Util.def"
Include "../util/Array.def"
Include "../table/TableTools.def"


Define BIF_RETURNONLYFSDIRS		1
Define BIF_DONTGOBELOWDOMAIN	2
Define MAX_PATH								260


Global gl_inputLeftPos As Integer
Global gl_formWidth As Integer
Global gl_formHeight As Integer
Global gl_innerIndent As Integer
Global gl_outerIndent As Integer
Global gl_buttonWidth As Integer
Global gl_buttonCount As Integer


Type BrowseInfo
	hWndOwner As Integer
	pIDLRoot As Integer
	pszDisplayName As integer
	lpszTitle As String
	ulFlags As Integer
	lpfnCallBack As Integer
	lParam As Integer
	iImage As Integer
End Type


Declare Function SHBrowseForFolder Lib "shell32"
	Alias "SHBrowseForFolder" (lpbi As BrowseInfo) As Integer
Declare Function SHGetPathFromIDList Lib "shell32"
	Alias "SHGetPathFromIDList" (ByVal pidList As Integer,
		lpBuffer As String) As Integer


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
'' INTERFACE IMPLEMENTATION
''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub FillListBox(ByVal cid As Integer, items() As String, ByVal firstEmpty As Logical)
	Dim size, i, offset As Integer
	Dim items2Show() As String

	size = UBound(items)

	If firstEmpty = 0 Then offset = 0
	Else offset = 1 End If

	ReDim items2Show(size + offset)

	If firstEmpty Then items2Show(1) = " " End If

	For i = 1 To size items2Show(i + offset) = items(i) Next

	Alter Control cid Title From Variable items2Show
End Sub


Sub FillPopup(ByVal cid As Integer, items() As String, ByVal firstEmpty As Logical)
	Call FillListBox(cid, items, firstEmpty)
End Sub


Sub ReadPopupMenu(ByVal cid As Integer, indices() As Integer)
	Dim idx As Integer

  ReDim indices(0)

  idx = ReadControlValue(cid)

  Do While idx > 0
  	Call AddIntToArray(indices, idx)

  	idx = ReadControlValue(cid)
  Loop
End Sub


Sub SetPopupMenuValues(ByVal cid As Integer, indices() As Integer)
	Dim i, size As Integer

	size = UBound(indices)

	For i = 1 To size
		Alter Control cid Value indices(i)
	Next
End Sub


'
' Source: http://lists.directionsmag.com/discussion/read.php?f=7&i=41458&t=41446
' Definitions in file header are also related to this function.
'
Function BrowseForFolderDlg(ByVal title As String) As String
	Dim lpIDList, retVal As Integer
	Dim sBuffer As String
	Dim tBrowseInfo As BrowseInfo
	
	tBrowseInfo.hWndOwner = SystemInfo(SYS_INFO_MAPINFOWND)
	tBrowseInfo.lpszTitle = title
	tBrowseInfo.ulFlags = BIF_RETURNONLYFSDIRS + BIF_DONTGOBELOWDOMAIN
	
	lpIDList = SHBrowseForFolder(tBrowseInfo)
	
	If lpIDList Then
		sBuffer = Space$(MAX_PATH)
	End If
	
	retVal = SHGetPathFromIDList(lpIDList, sBuffer)
	
	BrowseForFolderDlg = sBuffer
End Function


'
' Resize window to attract user's attention.
'
Sub BlinkWindow(winId As Integer)
	If winId > 0 Then
		If WindowInfo(winId, WIN_INFO_STATE) = WIN_STATE_NORMAL Then
			Set Window winId
				Max
			Set Window winId
				Restore
		Else
			Set Window winId
				Restore
			Set Window winId
				Max
		End If
	End If
End Sub


'
' Result is newly created window id.
'
Function DuplicateWindow(ByVal winId As Integer, ByVal newTitle As String) As Integer
	Dim res As Integer
	
	Run Command WindowInfo(winId, WIN_INFO_CLONEWINDOW)
	
	newTitle = Trim(newTitle)
	res = FrontWindow()
	
	If Len(newTitle) > 0 Then
		Set Window res Title newTitle
	End If
	
	DuplicateWindow = res
End Function


'
' Show directory chooser dialog.
'
Function DirectoryChooser(ByVal title As String,
		ByVal initiaDir As String) As String
	Dim path As String
	
	path = FileSaveAsDlg(initiaDir, "_", "", title)
	path = PathToDirectory$(path)
	
	DirectoryChooser = path
End Function


Sub EnableControl(ByVal cid As Integer)
	Call SetControlEnabled(cid, TRUE)
End Sub


Sub DisableControl(ByVal cid As Integer)
	Call SetControlEnabled(cid, FALSE)
End Sub


Sub EnableButton(ByVal cid As Integer)
	Call SetButtonEnabled(cid, TRUE)
End Sub


Sub DisableButton(ByVal cid As Integer)
	Call SetButtonEnabled(cid, FALSE)
End Sub


Sub SetControlEnabled(ByVal cid As Integer, ByVal enabled As Logical)
	If enabled Then Alter Control cid Enable
	Else Alter Control cid Disable End If
End Sub


Sub SetControlVisible(ByVal cid As Integer, ByVal visible As Logical)
	If visible Then Alter Control cid Show
	Else Alter Control cid Hide End If
End Sub


Sub SetButtonEnabled(ByVal cid As Integer, ByVal enabled As Logical)
	If enabled Then Alter Button ID cid Enable
	Else Alter Button ID cid Disable End If
End Sub


'
' Increment pos and return its new value.
'
Function IncPosition(pos As Integer, ByVal incStep As Integer) As Integer
	pos = pos + incStep
	
	IncPosition = pos
End Function


Sub SetDialogPreferences(ByVal formWidth As Integer, ByVal formHeight As Integer,
		ByVal inputLeftPos As Integer, ByVal innerIndent As Integer,
		ByVal outerIndent As Integer, ByVal buttonWidth As Integer,
		ByVal buttonCount As Integer)
	gl_inputLeftPos = inputLeftPos
	gl_formWidth = formWidth
	gl_formHeight = formHeight
	gl_innerIndent = innerIndent
	gl_outerIndent = outerIndent
	gl_buttonWidth = buttonWidth
	gl_buttonCount = buttonCount
End Sub


Sub SetDialogPreferencesDefault(ByVal formWidth As Integer,
		ByVal formHeight As Integer, ByVal inputLeftPos As Integer,
		ByVal buttonCount As Integer)
	Call SetDialogPreferences(formWidth, formHeight, inputLeftPos,
		GUI_INNER_INDENT, GUI_OUTER_INDENT, GUI_BUTTON_WIDTH, buttonCount)
End Sub


Function GetFormWidth() As Integer
	GetFormWidth = gl_formWidth
End Function


Function GetFormHeight() As Integer
	GetFormHeight = gl_formHeight
End Function


Function GetFieldLeft() As Integer
	GetFieldLeft = gl_inputLeftPos
End Function


Function GetLabelLeft() As Integer
	GetLabelLeft = gl_outerIndent
End Function


Function GetFieldWidth() As Integer
	Dim res As Integer
	
	res = gl_formWidth - gl_outerIndent - gl_inputLeftPos
	
	GetFieldWidth = res
End Function


Function GetFieldTop(ByVal baseLine As Integer) As Integer
	GetFieldTop = baseLine - 2
End Function


Function GetButtonTop() As Integer
	GetButtonTop = gl_formHeight - 25
End Function


Function GetButtonLeft(ByVal buttonNum As Integer) As Integer
	Dim res As Integer
	Dim buttonsWidth As Integer
	Dim leftPos As Integer
	
	If buttonNum > 0 And buttonNum <= gl_buttonCount Then
		buttonsWidth = gl_buttonCount * gl_buttonWidth + gl_innerIndent * (gl_buttonCount - 1)
		leftPos = (gl_formWidth - buttonsWidth) / 2
		res = leftPos + (gl_buttonWidth + gl_innerIndent) * (buttonNum - 1)
	End If
	
	GetButtonLeft = res
End Function


Function GetButtonWidth() As Integer
	GetButtonWidth = gl_buttonWidth
End Function


Function IncVPos(vPos As Integer) As Integer
	IncVPos = IncPosition(vPos, GUI_VERTICAL_INDENT)
End Function
